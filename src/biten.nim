import std/[
  strutils,
  sequtils,
  os
]

import pkg/nargparse

import
  general,
  lexer,
  parser,
  bytegen


const appVersion* = staticRead("../biten.nimble")
  .split("\n")
  .filterIt(it.startsWith("version"))[0]
  .split("=")[^1]
  .strip()[1..^2]


proc main() =
  let
    argp = newArgparser("biten")
    fHelp = argp.flag("h", "help", help="Displays the usage.")
    fVersion = argp.flag("v", "version", help="Displays the version.")
    fTokens = argp.flag("t", "tokens", help="Show the tokens generated by the lexer.")
    fNodes = argp.flag("n", "nodes", help="Show the nodes generated by the parser.")
    fOutput = argp.opt("o", "output", help="The file to write the resulting bytes to.")

  var args: seq[string]
  try:
    args = argp.parse(commandLineParams())
  except ArgparseError as e:
    echo e.msg
    echo argp
    quit 1

  if fHelp.exists:
    echo argp
    quit 0

  if fVersion.exists:
    echo "Biten version ", appVersion
    quit 0

  if args.len() == 0:
    echo "No input files given"
    quit 1

  var f: File
  if not open(f, args[0]):
    echo "File '", args[0], "' could not be opened"
    quit 1

  let l = newLexer(args[0], f)

  var tokens: seq[Token]
  try:
    tokens = l.lex()
  except BitenError as e:
    echo e.msg
    quit 1
  finally:
    f.close()

  if fTokens.exists:
    for tok in tokens:
      echo tok

    if fNodes.exists:
      echo ""

  let p = newParser(tokens)

  var nodes: seq[Node]
  try:
    nodes = p.parse()
  except BitenError as e:
    echo e.msg
    quit 1

  if fNodes.exists:
    for node in nodes:
      echo node

  let output = if fOutput.exists: fOutput.value else: args[0].lastPathPart().changeFileExt("") & ".bin"

  var outf: File
  if not open(outf, output, fmWrite):
    echo "File '", output, "' could not be opened"
    quit 1

  let g = newGenerator(outf)

  g.gen(nodes)

when isMainModule:
  main()
